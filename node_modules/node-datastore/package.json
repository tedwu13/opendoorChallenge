{
  "_args": [
    [
      "node-datastore",
      "/Users/tedwu/Desktop/opendoorChallenge"
    ]
  ],
  "_from": "node-datastore@*",
  "_id": "node-datastore@1.0.1",
  "_inCache": true,
  "_location": "/node-datastore",
  "_npmUser": {
    "email": "webdevsimon@gmail.com",
    "name": "stsvilik"
  },
  "_npmVersion": "1.1.66",
  "_phantomChildren": {},
  "_requested": {
    "name": "node-datastore",
    "raw": "node-datastore",
    "rawSpec": "",
    "scope": null,
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-datastore/-/node-datastore-1.0.1.tgz",
  "_shasum": "161e639f55e575f7d722b8e9953af5ebf63054f7",
  "_shrinkwrap": null,
  "_spec": "node-datastore",
  "_where": "/Users/tedwu/Desktop/opendoorChallenge",
  "author": {
    "email": "webdevsimon@gmail.com",
    "name": "Simon Tsvilik"
  },
  "bugs": {
    "url": "https://github.com/stsvilik/node-datastore/issues"
  },
  "dependencies": {
    "node-jpath": "2.x"
  },
  "description": "DataStore provides a powerfull features to manipulate tabular data",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "161e639f55e575f7d722b8e9953af5ebf63054f7",
    "tarball": "http://registry.npmjs.org/node-datastore/-/node-datastore-1.0.1.tgz"
  },
  "installable": true,
  "keywords": [
    "data",
    "datastore",
    "utility"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/stsvilik/node-datastore/blob/master/LICENSE-MIT"
    }
  ],
  "main": "./lib/node-datastore",
  "maintainers": [
    {
      "name": "stsvilik",
      "email": "webdevsimon@gmail.com"
    }
  ],
  "name": "node-datastore",
  "optionalDependencies": {},
  "readme": "node-datastore\n---\nData library was designed to accomodate most useful and commonly used features that are data-specific, such as sorting, filtering, paginating, aggregation functions, etc. Library addresses issues that we face every time we interact with some sort of web service, be it JSON or XML. The concept of Data in the context of this library refers to an Array of Rows (Array of JSON objects).\n\nInstallation\n---\n\tnpm install node-datastore\n\nInitialization\n---\n\tvar DataStore = require(\"node-datastore\");\n\nDataStore API\n---\n\n### Constructor\n\tvar myData = new DataStore(data, options);\n\n* data - JSON Object, or Array of object\n* options - Configuration object\n\t* pageSize - page size used for data pagination. Default: 10\n\t* dataNode - jPath expression to indicate the parent node of your rows. This is used when you initialize DataStore with a complex JSON object which has Array of rows burried deep inside.\n\n#### Example\n\tvar jsonData = {\n\t\tcompany: {\n\t\t\tname: \"ABC\",\n\t\t\tpeople: [\n\t\t\t\t{name: \"John\", age:26, gender:\"male\"},\n\t\t\t\t{name: \"Steve\", age:24, gender:\"male\"},\n\t\t\t\t{name: \"Susan\", age:22, gender:\"female\"},\n\t\t\t\t{name: \"Linda\", age:30, gender:\"female\"},\n\t\t\t\t{name: \"Adam\", age:32, gender:\"male\"}\n\t\t\t]\n\t\t}\n\t};\n\n\tvar peopleStore = new DataStore(jsonData, { dataNode: \"company.people\" });\n### Methods\n* setConfig(options) - This method allows you to set configuration options of your DataStore instance after it has been instantiated. It takes the same exact arguments as constructor.\n* getRows([start, [end]]) - This method returns all or limited set of rows in your dataset.\n* getRowByIndex(index) - Returns a single row by index. Note: Indexes in the rows remain the same regardless the sort, they are assigned during the data fill.\n* sort(column | [columnDef, n]) - sorts your data. If you just specify a string column name, then the data will be sorted by that column in Asending order. You may specify a multi-column sort as well, in that case you will need to provide columnDef objects as arguments.\n\t* columnDef - Column definition object\n\t\t* column - String column name\n\t\t* order - String \"asc\" | \"desc\"\n\t\t* type - String \"text\" | \"number\" | \"date\". Default: \"text\".\n* getPage(page [, pageSize]) - Returns a page subset (if pagination is enabled). pageSize argument takes preidence over pageSize option set at initialization.\n* count() - Returns a row count.\n* filter(expression) - Returns your rows based on filter expression. Expressions follow jPath syntax similar to XPATH but with a hint of JavaScript in it. Ex. \"*[field=value]\" will match rows where field equals value.\n* select(expression) - Returns results of jPath expression as new DataStore object. Similar to filter() method but returns a new DataStore instead of the Array.\n* insertRow(row) - Inserts a row object into existing dataset. Row could be an Array or JSON object, just try to keep the structure consistent!\n* sum( column ) - This is an aggregate function that will Sum up all the values in the column (if they are numeric of course). Column argument could be either a String name or a numeric column Index.\n* avg( column ) - Returns an Average for all column values. Same argument options as above (sum).\n* max( column ) - Returns a Maximum number among all values in the column.\n* min( column ) - Returns a Minimum number among all values in the column.\n* unique( column ) - This is a very powerful function that returns a unique set of values for a given column. Column attribute follows the same properties as above - either column name or index.\n* concat( data [, data] ) - As the name implies, this method will concatenate data from another DataStore instance or a Multi-dimensional Array into existing DataStore. This method is very useful when you have two instances of DataStore objects that contain similarly structured data, and you want to work against a merged set to either filter or paginate or find uniques, etc.\n* adjustData( [field], cb ) - This method is used to sanitize data. It executes a callback for each row. There are two signatures to this method:\n\t* field, cb - If you call adjustData with optional field argument, then it will call callback only for a single field and will pass into callback current value and row reference\n\t* cb - If you call adjustData only with a callback, then a callback will be called for each row in the dataset and a callback will only receive a row reference as an argument.\n* join(sourceData, pkFk, options) - Very powerful feature that allows you to merge two DataStore's based on pk->fk relationship. This method supports JOIN operations similar to SQL.\n\t* sourceData - Another instance of DataStore to merge exsiting DataStore with\n\t* pkFk - String or Object. If used as String, it implies that both PrimaryKey(PK) and ForeignKey(FK) are named exactly the same. In case PK and FK are named differently, you will need to pass in a mapping object that looks like this: { \"destinationKey\":\"sourceKey\" }.\n\t* options - Configuration options\n\t\t* type - Types of Join: inner(both keys match), differential(only non-matching), left(destination biased), right(source biased). Default: inner.\n\t\t* whiteList - Array of source field names that are allowed to be merged w/ destination row\n\t\t* blackList - Array of source field names that will be excluded when merging w/ destination row\n* groupBy( column [,column, column ...]) - Groups data by a column specified, creating a tree-like structure where keys are unique column values and leafs are rows of data. Each column you specify in the arguments will be nested inside of the previous column group.\n* clone() - Returns a cloned copy of your DataStore.\n* top(n) - Returns a new DataStore which contains a cropped data set of TOP rows specified by n.\n\n### Read-only Members\nAny instance of the DataStore also exposes several useful state members.\n\n* status - This objects retains a status for operations such as sorting and pagination\n\t* page - Current page cursor position\n\t* pageCount - How many pages total are in the set\n\t* sortedColumn - Currently sorted column ( currently only supported for a single column sort )\n\t* sortOrder - String value for a current sort order ( currently only supported for a single column sort )\n\t* currentRange - Object that contains indexes of first and last record within a current page. Ex. {start: 1, end:25} - for a page size of 25.\n\nRow Members\n---\nEvery row in the DataStore contains only one foreign member that keeps the value of the Row Index\n\\_\\_rowIndex\\_\\_ - use this member to identify row index. This is useful if you will need to find a row later by index.\nNote: There are 2 underscores on each side of rowIndex!\n\nEvents\n---\nDataStore instance implements EventEmitter and exposes some useful events\n\n* beforeSort - fires before a sort takes place\n* sort - fires right after a sort has been performed\n* change - fires whenever the data has changed\n* insert - fires whenever a row is inserted\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/stsvilik/node-datastore.git"
  },
  "version": "1.0.1"
}
